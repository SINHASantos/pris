std =
{
  anchors =
  {
    center = (0.5w, 0.5h)
    top_left = (0.1w, 0.1w)
    top_right = (0.9w, 0.1w)
    bottom_left = (0.1w, 1.0h - 0.1w)
    bottom_right = (0.9w, 1.0h - 0.1w)
  }

  three_times = function(x)
  {
    put x at (0, 0)
    put x at (0, 1.2em)
    put x at (0, 2.4em)
    foobar = 32
  }
}

import std

// Set the em size to 1/23th of the slide width.
em_size = 1w / 23

ax = std.anchors

{
  background_color = #fafafa

  // Load 'logo.png', resize it (preserving aspect ratio) to fit in a
  // 5em x 5em box, and put it (with the box center) 5em above ax.center.
  image_origin = (0.5, 0.5)
  at (ax.center - (0, 5em)) put (image("logo.png") fit (5em, 5em))

  font_size = 2em
  font_weight = bold
  text_origin = (0.5, 1.0)

  // Double quotes render a string.
  at ax.center put "Welcome"

  font_size = 1em

  at (ax.center + (0, 1em)) put "To my talk"

  // Could be flexible in put/at order.
  put "To my talk" at (ax.center + (0, 2em))
}

{
  // All functions return boxes.
  // A box can have variables, but it is also drawn.
  put three_times("repeat") at ax.center

  z = three_times("doesn't matter")
  at (z.foobar, z.foobar) put "This is at (32, 32)"
}

{
  // There is some basic drawing stuff.
  color = #404040
  line_width = 0.02em
  line_style = solid
  at ax.top_left put line(ax.top_right - ax.top_left)
}

{
  // How to do text formatting? Maybe promoting string literals to boxes is not
  // such a good idea after all; explicit is better than implicit? And ~ for
  // boxes would mean to put them adjacent, origin to width?
  at (0.5w, 0.5h) put text("Hello ") ~ emph("world")

  // Or, at the other extreme, embed markup in string literals:
  at ax.center put "Hello <em>world</em>"

  // How do other languages solve this? String interpolation?
  at ax.center put "Hello ${font_style = italic}world"

  // Or perhaps suffixes?
  at ax.center put "Hello " ~ "world"i

  // Or prefixes?
  at ax.center put b"Hello, " ~ "world"

  // That last one seems to work well. Could have multiple:
  put b"Hi" at ax.l0 // Bold
  put i"Hi" at ax.l1 // Italic
  put sc"nsa ghcs aivd" at ax.l2 // Small caps

  // Could also use this to make regular text less magic?
  put t"Hi" at ax.l0 // Regular text? Nah, looks weird.

  // String concatenation (for regular strings) or adjacent box placement would
  // be indistinguishable, which is nice ...? Does this mean, put the string
  // "Hello world" at (0, 0)? Or does it put "Hello " at (0, 0) and "world" at
  // (0 + <width of previous text>, 0)? They should be the same.
  put "Hello " + "world" at (0, 0)

  // Should these be user-controllable? Likely, yes (to switch between OpenType
  // small caps and separate font small caps). Maybe they are functions which
  // can be overridden.
  i_style = function()
  {
    font_style = italic
  }

  sc_style = function()
  {
    font_family = "Zhe Font Smcp"             // When it is a separate font
    // font_features = font_features ++ ["smcp"] // When the font supports it.
    // Double ++ for list and string concat perhaps?
    // Yes, because it is simpler: ++ concatenates, + is for coordinates.
  }

  // But does it scale? What about bold *and* italic? Let's not worry about that
  // right now. After all you can set the font and align manually when required.
}

// Add a slide number to every slide.
// TODO: Syntax, such as "slides.apply"?
{
  font_size = 0.5em
  color = #777777
  text_origin = (1.0, 1.0)
  at ax.bottom_right put (str(slide_number) + "/" + str(slide_count))
}
