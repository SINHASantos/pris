// Pris -- A language for designing slides
// Copyright 2017 Ruud van Asseldonk

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3. A copy
// of the License is available in the root of the repository.

use std::str::FromStr;
use ast::{Color, Idents, Num, Term, Unit};

grammar;

pub term: Term<'input> = {
  <num> => Term::Number(<>),
  <string> => Term::String(<>),
  <color> => Term::Color(<>),
  <idents> => Term::Idents(<>),
};

num: Num = bare_num unit? => Num(<>);

bare_num: f64 = r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap();

unit: Unit = {
  "w" => Unit::W,
  "h" => Unit::H,
  "em" => Unit::Em,
  "pt" => Unit::Pt,
};

string: &'input str = r#""([^"\\]|\\.)*""# => <>;

color: Color = <c:r"#[0-9a-f]{6}"> => {
  let r = u8::from_str_radix(&c[1..3], 16).unwrap();
  let g = u8::from_str_radix(&c[3..5], 16).unwrap();
  let b = u8::from_str_radix(&c[5..7], 16).unwrap();
  Color(r, g, b)
};

idents: Idents<'input> = {
  <i:ident> => Idents(vec![i]),
  <p:idents> "." <i:ident> => { let Idents(mut v) = p; v.push(i); Idents(v) }
};

ident: &'input str = r"[a-z][a-z0-9_]*" => <>;
