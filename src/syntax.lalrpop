// Pris -- A language for designing slides
// Copyright 2017 Ruud van Asseldonk

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3. A copy
// of the License is available in the root of the repository.

use std::str::FromStr;
use ast::{Assign, BinOp, BinTerm, Block, Color, Coord, Document, FnCall, FnDef};
use ast::{Idents, Import, Item, Num, PutAt, Return, Stmt, Term, Unit};

grammar;

pub document: Document<'input> = <item*> => Document(<>);

item: Item<'input> = {
  import => Item::Import(<>),
  assign => Item::Assign(<>),
  block => Item::Block(<>),
};

import: Import<'input> = "import" <idents> => Import(<>);

idents: Idents<'input> = {
  <i:ident> => Idents(vec![i]),
  <p:idents> "." <i:ident> => { let Idents(mut v) = p; v.push(i); Idents(v) }
};

ident: &'input str = r"[a-z][a-z0-9_]*" => <>;

assign: Assign<'input> = <ident> "=" <expr> => Assign(<>);

expr: Term<'input> = { expr_add };

expr_add: Term<'input> = {
  <expr_mul> => <>,
  <lhs:expr_add> "+" <rhs:expr_mul> => Term::BinOp(Box::new(BinTerm(lhs, BinOp::Add, rhs))),
  <lhs:expr_add> "-" <rhs:expr_mul> => Term::BinOp(Box::new(BinTerm(lhs, BinOp::Sub, rhs))),
};

expr_mul: Term<'input> = {
  <expr_exp> => <>,
  <lhs:expr_mul> "*" <rhs:expr_exp> => Term::BinOp(Box::new(BinTerm(lhs, BinOp::Mul, rhs))),
  <lhs:expr_mul> "/" <rhs:expr_exp> => Term::BinOp(Box::new(BinTerm(lhs, BinOp::Div, rhs))),
};

expr_exp: Term<'input> = {
  <term> => <>,
  <lhs:term> "^" <rhs:term> => Term::BinOp(Box::new(BinTerm(lhs, BinOp::Exp, rhs))),
};

term: Term<'input> = {
  string => Term::String(<>),
  num => Term::Number(<>),
  color => Term::Color(<>),
  idents => Term::Idents(<>),
  coord => Term::Coord(Box::new(<>)),
  fn_call => Term::FnCall(Box::new(<>)),
  fn_def => Term::FnDef(<>),
  block => Term::Block(<>),
  "(" <expr> ")" => <>,
};

num: Num = bare_num unit? => Num(<>);

bare_num: f64 = r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap();

unit: Unit = {
  "w" => Unit::W,
  "h" => Unit::H,
  "em" => Unit::Em,
  "pt" => Unit::Pt,
};

string: &'input str = r#""([^"\\]|\\.)*""# => <>;

color: Color = <c:r"#[0-9a-f]{6}"> => {
  let r = u8::from_str_radix(&c[1..3], 16).unwrap();
  let g = u8::from_str_radix(&c[3..5], 16).unwrap();
  let b = u8::from_str_radix(&c[5..7], 16).unwrap();
  Color(r, g, b)
};

coord: Coord<'input> = "(" <expr> "," <expr> ")" => Coord(<>);

fn_call: FnCall<'input> = {
  <f:term> "(" ")" => FnCall(f, Vec::new()),
  <f:term> "(" <a:fn_call_args> ")" => FnCall(f, a),
};

fn_call_args: Vec<Term<'input>> = {
  <e:expr> => vec![e],
  <p:fn_call_args> "," <e:expr> => { let mut v = p; v.push(e); v }
};

fn_def: FnDef<'input> = {
  "function" "(" ")" <b:block> => FnDef(Vec::new(), b),
  "function" "(" <a:fn_def_args> ")" <b:block> => FnDef(a, b),
};

fn_def_args: Vec<&'input str> = {
  <i:ident> => vec![i],
  <p:fn_def_args> "," <i:ident> => { let mut v = p; v.push(i); v }
};

block: Block<'input> = "{" <statement*> "}" => Block(<>);

put_at: PutAt<'input> = {
  "put" <e:expr> "at" <c:expr> => PutAt(e, c),
  "at" <c:expr> "put" <e:expr> => PutAt(e, c),
};

return: Return<'input> = "return" <expr> => Return(<>);

statement: Stmt<'input> = {
  assign => Stmt::Assign(<>),
  put_at => Stmt::PutAt(<>),
  return => Stmt::Return(<>),
};
